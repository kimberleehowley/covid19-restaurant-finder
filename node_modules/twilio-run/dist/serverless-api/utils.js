"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const global_1 = require("../config/global");
const logger_1 = require("../utils/logger");
const log = logger_1.getDebugFunction('twilio-run:internal:utils');
function getFunctionServiceSid(cwd, configName, commandConfig, projectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const twilioConfig = global_1.readSpecializedConfig(cwd, configName, commandConfig, {
            projectId,
        });
        return twilioConfig.serviceSid;
    });
}
exports.getFunctionServiceSid = getFunctionServiceSid;
function saveLatestDeploymentData(cwd, serviceSid, buildSid, projectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = global_1.getConfig(cwd);
        if (!config.has('serviceSid')) {
            config.set('serviceSid', serviceSid);
        }
        if (config.get('serviceSid') === serviceSid) {
            config.set('latestBuild', buildSid);
        }
        if (projectId) {
            if (!config.has(`projects.${projectId}.serviceSid`)) {
                config.set(`projects.${projectId}.serviceSid`, serviceSid);
            }
            config.set(`projects.${projectId}.latestBuild`, buildSid);
        }
    });
}
exports.saveLatestDeploymentData = saveLatestDeploymentData;
