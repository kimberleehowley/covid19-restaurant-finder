"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const logger_1 = require("../utils/logger");
const data_1 = require("./data");
const filesystem_1 = require("./filesystem");
const path_1 = __importDefault(require("path"));
function downloadTemplate(templateName, namespace, targetDirectory) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const files = yield data_1.getTemplateFiles(templateName);
            yield filesystem_1.writeFiles(files, targetDirectory, namespace, templateName);
            logger_1.logger.info(chalk_1.default `{green SUCCESS} Downloaded new template into the "${namespace}" subdirectories.`);
            logger_1.logger.info(`Check ${path_1.default.join('readmes', namespace, `${templateName}.md`)} for template instructions.`);
        }
        catch (err) {
            logger_1.logger.error(err.message, err.name);
        }
    });
}
exports.downloadTemplate = downloadTemplate;
var data_2 = require("./data");
exports.fetchListOfTemplates = data_2.fetchListOfTemplates;
