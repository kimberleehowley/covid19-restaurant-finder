"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const common_tags_1 = require("common-tags");
const output_1 = require("../../utils/output");
function simpleLogs(req, res) {
    const contentType = res.get('Content-Type');
    const responseCode = res.statusCode >= 400
        ? chalk_1.default `{black.bgRed ${res.statusCode}}`
        : res.statusCode < 300
            ? chalk_1.default `{black.bgGreen ${res.statusCode}}`
            : chalk_1.default `{black.bgYellow ${res.statusCode}}`;
    let msg = chalk_1.default `
  ${responseCode} {bold ${req.method}} ${req.originalUrl}`;
    if (contentType) {
        msg += chalk_1.default ` │ {dim Response Type ${contentType}}`;
    }
    return common_tags_1.stripIndent `${msg}`;
}
function detailedLogs(req, res) {
    debugger;
    const msgLines = [chalk_1.default `{reset }`, simpleLogs(req, res)];
    let body;
    const bodyEntries = Object.entries(req.body);
    if (bodyEntries.length > 0) {
        const lines = bodyEntries
            .map(([key, value]) => chalk_1.default `│    ${key}: {bold ${value}}`)
            .join('\n');
        body = `│  Body:\n${lines}`;
    }
    let query;
    const queryEntries = Object.entries(req.query);
    if (queryEntries.length > 0) {
        const lines = queryEntries
            .map(([key, value]) => chalk_1.default `│    ${key}: {bold ${value}}`)
            .join(chalk_1.default.reset() + '\n');
        query = `│  Query:\n${lines}`;
    }
    if (body || query) {
        msgLines.push(chalk_1.default `│{underline Request:}`);
        if (query) {
            msgLines.push(query);
        }
        if (body) {
            msgLines.push(body);
        }
    }
    return msgLines.filter(x => !!x).join('\n');
}
function createLogger(config) {
    return function requestLogger(req, res, next) {
        const resEnd = res.end.bind(res);
        res.end = function sendInterceptor(...args) {
            const msg = config.detailedLogs
                ? detailedLogs(req, res)
                : simpleLogs(req, res);
            output_1.writeOutput(msg);
            resEnd(...args);
        };
        next();
    };
}
exports.createLogger = createLogger;
