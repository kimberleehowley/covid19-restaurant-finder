"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const twilio_1 = __importDefault(require("twilio"));
const check_account_sid_1 = require("../../checks/check-account-sid");
const logger_1 = require("../../utils/logger");
const debug = logger_1.getDebugFunction('twilio-run:runtime');
const { getCachedResources } = require('./route-cache');
function getAssets() {
    const { assets } = getCachedResources();
    if (assets.length === 0) {
        return {};
    }
    const result = {};
    for (const asset of assets) {
        if (asset.access === 'private') {
            const prefix = process.env.TWILIO_FUNCTIONS_LEGACY_MODE === 'true' ? '/assets' : '';
            const open = () => fs_1.readFileSync(asset.filePath, 'utf8');
            result[prefix + asset.path] = { path: asset.filePath, open };
        }
    }
    debug('Found the following assets available: %O', result);
    return result;
}
function getFunctions() {
    const { functions } = getCachedResources();
    if (functions.length === 0) {
        return {};
    }
    const result = {};
    for (const fn of functions) {
        result[fn.path.substr(1)] = { path: fn.filePath };
    }
    debug('Found the following functions available: %O', result);
    return result;
}
function create({ env }) {
    function getSync(options) {
        options = Object.assign({ serviceName: 'default' }, options);
        const { serviceName } = options;
        delete options.serviceName;
        check_account_sid_1.checkForValidAccountSid(env.ACCOUNT_SID, {
            shouldPrintMessage: true,
            shouldThrowError: true,
            functionName: `Runtime.getSync(${[...arguments]
                .map((x) => JSON.stringify(x))
                .join(',')})`,
        });
        const client = twilio_1.default(env.ACCOUNT_SID, env.AUTH_TOKEN, options);
        const service = client.sync.services(serviceName || 'default');
        service.maps = service.syncMaps;
        service.lists = service.syncLists;
        return service;
    }
    return { getSync, getAssets, getFunctions };
}
exports.create = create;
module.exports = { create };
