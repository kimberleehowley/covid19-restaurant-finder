"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const ActivateCommand = __importStar(require("./commands/activate"));
const DeployCommand = __importStar(require("./commands/deploy"));
const ListCommand = __importStar(require("./commands/list"));
const NewCommand = __importStar(require("./commands/new"));
const StartCommand = __importStar(require("./commands/start"));
const ListTemplatesCommand = __importStar(require("./commands/list-templates"));
const LogsCommand = __importStar(require("./commands/logs"));
require("./utils/debug");
function run(rawArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        yargs_1.default
            .command(StartCommand)
            .command(NewCommand)
            .command(ListTemplatesCommand)
            .command(DeployCommand)
            .command(ListCommand)
            .command(ActivateCommand)
            .command(LogsCommand)
            .parse(rawArgs.slice(2));
    });
}
exports.run = run;
