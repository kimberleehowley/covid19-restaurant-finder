"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const serverless_api_1 = require("@twilio-labs/serverless-api");
const chalk_1 = __importDefault(require("chalk"));
const common_tags_1 = require("common-tags");
const logger_1 = require("../utils/logger");
function doesAnyDirectoryExist(basePath, directories) {
    return __awaiter(this, void 0, void 0, function* () {
        let foundDirectories;
        try {
            foundDirectories = serverless_api_1.fsHelpers.getFirstMatchingDirectory(basePath, directories);
        }
        catch (_a) {
            foundDirectories = undefined;
        }
        if (typeof foundDirectories !== 'undefined') {
            return true;
        }
        return false;
    });
}
exports.doesAnyDirectoryExist = doesAnyDirectoryExist;
function checkProjectStructure(basePath, command, shouldExit = false, directories = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const allDirectories = [
            ...(directories.functionsDirectories || ['functions', 'src']),
            ...(directories.assetsDirectories || ['assets', 'static']),
        ];
        if (yield doesAnyDirectoryExist(basePath, allDirectories)) {
            return;
        }
        let initializationCommand = 'npx create-twilio-function';
        if (command.includes(':')) {
            initializationCommand = command.substr(0, command.indexOf(':')) + ':init';
        }
        const quotedDirectories = allDirectories.map(dir => `"${dir}"`);
        const messageBody = common_tags_1.stripIndent `
    We could not find any of the following directories ${common_tags_1.commaListsOr `${quotedDirectories}`} in "${basePath}".
    
    ${chalk_1.default.bold(`What's a Serverless project?`)}
    The easiest way to start a Serverless project is by running:
      > ${initializationCommand} example-project
      > cd example-project

    ${chalk_1.default.bold('I got an existing Serverless project')}
    If you have an existing Serverless project, make sure to change into the root directory. Alternatively you can use the "--cwd" flag to specify the directory of your choice.
  `;
        const title = 'Invalid Serverless Project Structure';
        if (shouldExit) {
            logger_1.logger.error(messageBody, title);
            process.exit(1);
        }
        else {
            logger_1.logger.warn(messageBody, title);
        }
    });
}
exports.default = checkProjectStructure;
