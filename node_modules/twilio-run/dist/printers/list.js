"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const columnify_1 = __importDefault(require("columnify"));
const common_tags_1 = require("common-tags");
const lodash_startcase_1 = __importDefault(require("lodash.startcase"));
const log_symbols_1 = __importDefault(require("log-symbols"));
const title_1 = __importDefault(require("title"));
const logger_1 = require("../utils/logger");
const output_1 = require("../utils/output");
const utils_1 = require("./utils");
const LONG_LINE = '─'.repeat(utils_1.windowSize.width);
const baseKeys = {
    environments: [
        'sid',
        'build_sid',
        'unique_name',
        'domain_name',
        'domain_suffix',
        'date_updated',
    ],
    builds: ['sid', 'status', 'date_updated'],
    services: ['sid', 'unique_name', 'date_created', 'date_updated'],
    variables: ['environment_sid', 'key', 'value'],
    functions: ['path', 'visibility'],
    assets: ['path', 'visibility'],
};
const extendedKeys = {
    environments: [
        'account_sid',
        'service_sid',
        'sid',
        'build_sid',
        'unique_name',
        'domain_name',
        'domain_suffix',
        'date_created',
        'date_updated',
    ],
    builds: [
        'account_sid',
        'service_sid',
        'sid',
        'status',
        'date_created',
        'date_updated',
        'function_versions',
        'asset_versions',
        'dependencies',
    ],
    services: [
        'account_sid',
        'sid',
        'unique_name',
        'friendly_name',
        'date_created',
        'date_updated',
    ],
    variables: [
        'account_sid',
        'service_sid',
        'environment_sid',
        'sid',
        'key',
        'value',
        'date_created',
        'date_updated',
    ],
    functions: [
        'account_sid',
        'service_sid',
        'function_sid',
        'sid',
        'path',
        'visibility',
        'date_created',
    ],
    assets: [
        'account_sid',
        'service_sid',
        'asset_sid',
        'sid',
        'path',
        'visibility',
        'date_created',
    ],
};
function formatDate(dateStr) {
    return new Date(dateStr).toString().slice(4, 33);
}
function sortByAccess(resA, resB) {
    if (resA.visibility === resB.visibility) {
        resA.path.localeCompare(resB.path);
    }
    return resA.visibility.localeCompare(resB.visibility);
}
const headingTransform = (name) => {
    return chalk_1.default.cyan.bold(lodash_startcase_1.default(name).replace(/Sid$/g, 'SID'));
};
function printRows(rows, keys) {
    return columnify_1.default(rows, { columns: keys, headingTransform });
}
function getKeys(type, config) {
    let keys = config.properties || [];
    if (config.extendedOutput) {
        keys = extendedKeys[type];
    }
    else if (!config.properties) {
        keys = baseKeys[type];
    }
    return keys;
}
function printSection(type, sectionEntries, config) {
    let keys = getKeys(type, config);
    let sectionEntryArray = [];
    if (Array.isArray(sectionEntries)) {
        sectionEntryArray = sectionEntries;
    }
    else if (sectionEntries && sectionEntries.entries) {
        sectionEntryArray = sectionEntries.entries;
    }
    return printRows(sectionEntryArray, keys);
}
function printListResultPlain(result, config) {
    const types = Object.keys(result);
    if (types.length === 1) {
        output_1.writeOutput(printSection(types[0], result[types[0]], config));
        return;
    }
    for (const type of types) {
        const section = result[type];
        const output = printSection(type, section, config);
        output_1.writeOutput(lodash_startcase_1.default(type) + '\n' + output + '\n');
    }
}
function prettyPrintFunctionsOrAssets(result) {
    const { entries } = result;
    const resourceString = entries
        .sort(sortByAccess)
        .map((entry, idx) => {
        const suffix = entry.visibility === 'public'
            ? ' '
            : chalk_1.default `{dim [Visibility {reset.bold ${entry.visibility}}]}`;
        return common_tags_1.stripIndent(chalk_1.default `
        {dim │} {reset ${entry.path}} ${suffix}
      `);
    })
        .join('\n');
    return resourceString;
}
function prettyPrintVariables(variables) {
    const { entries } = variables;
    const updatedRows = entries.map((entry) => {
        return Object.assign(Object.assign({}, entry), { key: chalk_1.default `{dim │} {cyan ${entry.key}}:` });
    });
    const renderedValues = columnify_1.default(updatedRows, {
        columns: ['key', 'value'],
        showHeaders: false,
    });
    return renderedValues;
}
function prettyPrintEnvironment(environment) {
    return common_tags_1.stripIndent(chalk_1.default `
      {bold ${environment.domain_suffix}} {dim [${environment.sid}]}
      {dim │} {cyan URL:         } {reset ${environment.domain_name}}
      {dim │} {cyan Unique Name: } {reset ${environment.unique_name}}
      {dim │} {cyan Active Build:} {reset ${environment.build_sid}}
      {dim │} {cyan Last Updated:} {reset ${formatDate(environment.date_updated)}}
  `);
}
function prettyPrintServices(service) {
    return common_tags_1.stripIndent(chalk_1.default `
  {bold ${service.unique_name}}
  {dim │} {cyan SID: }     ${service.sid}
  {dim │} {cyan Created: } {dim ${formatDate(service.date_created)}}
  {dim │} {cyan Updated: } {dim ${formatDate(service.date_updated)}}
  `);
}
function prettyPrintBuilds(build) {
    let status = chalk_1.default.reset.yellow(build.status);
    if (build.status === 'completed') {
        status = chalk_1.default.reset.green(`${log_symbols_1.default.success} ${build.status}`);
    }
    else if (build.status === 'failed') {
        status = chalk_1.default.reset.red(`${log_symbols_1.default.error} ${build.status}`);
    }
    return common_tags_1.stripIndent(chalk_1.default `
      {bold ${build.sid}} {dim [${status}]}
      {dim │} {cyan Date:} {dim ${formatDate(build.date_updated)}}
  `);
}
function prettyPrintSection(sectionTitle, sectionContent) {
    let sectionHeader = chalk_1.default.cyan.bold(`${title_1.default(sectionTitle)}:`);
    let content = '';
    if (sectionTitle === 'builds') {
        content = sectionContent
            .map(prettyPrintBuilds)
            .join(`\n\n`);
    }
    else if (sectionTitle === 'environments') {
        content = sectionContent
            .map(prettyPrintEnvironment)
            .join('\n\n');
    }
    else if (sectionTitle === 'services') {
        content = sectionContent
            .map(prettyPrintServices)
            .join('\n\n');
    }
    else if (sectionTitle === 'variables') {
        const data = sectionContent;
        sectionHeader = chalk_1.default `{cyan.bold ${title_1.default(sectionTitle)}} {dim for environment ${data.environmentSid}}`;
        content = prettyPrintVariables(data);
    }
    else if (sectionTitle === 'functions' || sectionTitle === 'assets') {
        const data = sectionContent;
        sectionHeader = chalk_1.default `{cyan.bold ${title_1.default(sectionTitle)}} {dim for environment ${data.environmentSid}}`;
        content = prettyPrintFunctionsOrAssets(data);
    }
    const output = common_tags_1.stripIndent `
    ${sectionHeader}\n\n${content}\n\n\n
  `;
    return output;
}
function printListResultTerminal(result, config) {
    const sections = Object.keys(result);
    const output = sections
        .map(section => prettyPrintSection(section, result[section]))
        .join(`\n\n${chalk_1.default.dim(LONG_LINE)}\n\n`);
    let metaInfo = common_tags_1.stripIndent(chalk_1.default `
    {cyan.bold Account}      ${config.accountSid}
    {cyan.bold Token}        ${utils_1.redactPartOfString(config.authToken)}
  `);
    if (config.serviceSid || config.serviceName) {
        metaInfo += chalk_1.default `\n{cyan.bold Service}      ${config.serviceSid ||
            config.serviceName}`;
    }
    if (config.environment) {
        metaInfo += chalk_1.default `\n{cyan.bold Environment}  ${config.environment}`;
    }
    logger_1.logger.info(metaInfo + '\n');
    output_1.writeOutput(output);
}
function printListResult(result, config) {
    if (utils_1.shouldPrettyPrint && !config.properties && !config.extendedOutput) {
        printListResultTerminal(result, config);
    }
    else {
        printListResultPlain(result, config);
    }
}
exports.printListResult = printListResult;
