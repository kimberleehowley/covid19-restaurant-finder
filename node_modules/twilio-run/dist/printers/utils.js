"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const columnify_1 = __importDefault(require("columnify"));
const is_ci_1 = __importDefault(require("is-ci"));
const window_size_1 = __importDefault(require("window-size"));
const wrap_ansi_1 = __importDefault(require("wrap-ansi"));
exports.windowSize = window_size_1.default || { width: 80, height: 300 };
exports.shouldPrettyPrint = process.stdout.isTTY && !is_ci_1.default;
exports.supportsEmoji = process.platform !== 'win32' || is_ci_1.default || process.env.TERM === 'xterm-256color';
function getTwilioConsoleDeploymentUrl(serviceSid, environmentSid) {
    return `https://www.twilio.com/console/assets/api/${serviceSid}/environment/${environmentSid}`;
}
exports.getTwilioConsoleDeploymentUrl = getTwilioConsoleDeploymentUrl;
function printObjectWithoutHeaders(obj) {
    return columnify_1.default(obj, { showHeaders: false });
}
exports.printObjectWithoutHeaders = printObjectWithoutHeaders;
function terminalLink(name, link) {
    return chalk_1.default `${name} {dim | ${link}}`;
}
exports.terminalLink = terminalLink;
function borderLeft(text, color) {
    return text
        .split('\n')
        .map(str => `${chalk_1.default.keyword(color)('â”‚')} ${str}`)
        .join('\n');
}
exports.borderLeft = borderLeft;
const wrapText = (text) => wrap_ansi_1.default(text, exports.windowSize.width - 5, { trim: false });
function importantMessage(label, color, title, body) {
    label = chalk_1.default.keyword(color)(label);
    title = wrapText(chalk_1.default.bold.underline(`${label} ${chalk_1.default.bold(title)}`));
    body = wrapText(body);
    return '\n' + borderLeft(`${title}\n\n${chalk_1.default.dim(body)}`, color) + '\n';
}
exports.importantMessage = importantMessage;
function warningMessage(title, body) {
    return importantMessage('WARNING', 'yellow', title, body);
}
exports.warningMessage = warningMessage;
function errorMessage(title, body) {
    return importantMessage('ERROR', 'red', title, body);
}
exports.errorMessage = errorMessage;
function redactPartOfString(input, paddingFront = 4) {
    const unredacted = input.substr(0, paddingFront);
    const redactedLength = input.length - paddingFront;
    const redactedStars = '*'.repeat(redactedLength);
    return unredacted + redactedStars;
}
exports.redactPartOfString = redactPartOfString;
