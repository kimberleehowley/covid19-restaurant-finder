"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const actions_1 = require("../templating/actions");
const logger_1 = require("../utils/logger");
const output_1 = require("../utils/output");
const shared_1 = require("./shared");
function handler(flags) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.setLogLevelByName(flags.logLevel);
        const spinner = logger_1.getOraSpinner('Fetching available templates').start();
        let templates;
        try {
            templates = yield actions_1.fetchListOfTemplates();
        }
        catch (err) {
            spinner.fail('Failed to retrieve templates');
            process.exitCode = 1;
            return;
        }
        spinner.stop();
        templates.forEach(template => {
            output_1.writeOutput(chalk_1.default `â€£ ${template.name} ({cyan ${template.id}})\n  {dim ${template.description}}`);
        });
    });
}
exports.handler = handler;
exports.cliInfo = { options: Object.assign({}, shared_1.baseCliOptions) };
exports.command = ['list-templates'];
exports.describe = 'Lists the available Twilio Function templates';
