"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const serverless_api_1 = require("@twilio-labs/serverless-api");
const logs_1 = require("../config/logs");
const check_credentials_1 = require("../checks/check-credentials");
const check_service_sid_1 = __importDefault(require("../checks/check-service-sid"));
const logs_2 = require("../printers/logs");
const logger_1 = require("../utils/logger");
const shared_1 = require("./shared");
const utils_1 = require("./utils");
const debug = logger_1.getDebugFunction('twilio-run:logs');
function logError(msg) {
    logger_1.logger.error(msg);
}
function handleError(err) {
    debug('%O', err);
    logError(err.message);
    process.exit(1);
}
function handler(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.setLogLevelByName(flags.logLevel);
        let config;
        try {
            config = yield logs_1.getConfigFromFlags(flags, externalCliOptions);
        }
        catch (err) {
            debug(err);
            logError(err.message);
            process.exit(1);
            return;
        }
        if (!config) {
            logError('Internal Error');
            process.exit(1);
            return;
        }
        check_credentials_1.checkConfigForCredentials(config);
        const command = utils_1.getFullCommand(flags);
        check_service_sid_1.default(command, config.serviceSid);
        try {
            const client = new serverless_api_1.TwilioServerlessApiClient(config);
            if (flags.tail) {
                const stream = yield client.getLogsStream(Object.assign({}, config));
                stream.on('data', (log) => {
                    logs_2.printLog(log, config.outputFormat);
                });
            }
            else {
                const result = (yield client.getLogs(Object.assign({}, config)));
                logs_2.printLogs(result, config, config.outputFormat);
            }
        }
        catch (err) {
            handleError(err);
        }
    });
}
exports.handler = handler;
exports.cliInfo = {
    options: Object.assign(Object.assign({}, shared_1.sharedCliOptions), { 'service-sid': {
            type: 'string',
            describe: 'Specific Serverless Service SID to retrieve logs for',
        }, environment: {
            type: 'string',
            describe: 'The environment to retrieve the logs for',
            default: 'dev',
        }, 'function-sid': {
            type: 'string',
            describe: 'Specific Function SID to retrieve logs for',
        }, tail: {
            type: 'boolean',
            describe: 'Continuously stream the logs',
        }, 'output-format': {
            type: 'string',
            alias: 'o',
            default: '',
            describe: 'Output the log in a different format',
            choices: ['', 'json'],
        }, 'account-sid': {
            type: 'string',
            alias: 'u',
            describe: 'A specific account SID to be used for deployment. Uses fields in .env otherwise',
        }, 'auth-token': {
            type: 'string',
            describe: 'Use a specific auth token for deployment. Uses fields from .env otherwise',
        }, env: {
            type: 'string',
            describe: 'Path to .env file for environment variables that should be installed',
        } }),
};
function optionBuilder(yargs) {
    yargs = yargs
        .example('$0 logs', 'Prints the last 50 logs for the current project in the dev environment')
        .example('$0 logs --environment=production', 'Prints the last 50 logs for the current project in the production environment')
        .example('$0 logs --tail', 'Tails and prints the logs of the current project')
        .example('$0 logs --functionSid=ZFXXX', 'Only prints the logs from the named function');
    yargs = Object.keys(exports.cliInfo.options).reduce((yargs, name) => {
        return yargs.option(name, exports.cliInfo.options[name]);
    }, yargs);
    return yargs;
}
exports.command = ['logs'];
exports.describe = 'Print logs from your Twilio Serverless project';
exports.builder = optionBuilder;
