"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const check_service_sid_1 = __importDefault(require("../checks/check-service-sid"));
const activate_1 = require("../commands/activate");
const utils_1 = require("../commands/utils");
const global_1 = require("./global");
const utils_2 = require("./utils");
const mergeFlagsAndConfig_1 = require("./utils/mergeFlagsAndConfig");
function getConfigFromFlags(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        let cwd = flags.cwd ? path_1.default.resolve(flags.cwd) : process.cwd();
        flags.cwd = cwd;
        const configFlags = global_1.readSpecializedConfig(cwd, flags.config, 'activateConfig', {
            projectId: flags.accountSid ||
                (externalCliOptions && externalCliOptions.accountSid) ||
                undefined,
            environmentSuffix: flags.environment,
        });
        flags = mergeFlagsAndConfig_1.mergeFlagsAndConfig(configFlags, flags, activate_1.cliInfo);
        cwd = flags.cwd || cwd;
        if (flags.production) {
            flags.environment = '';
        }
        const { accountSid, authToken } = yield utils_2.getCredentialsFromFlags(flags, externalCliOptions);
        const command = utils_1.getFullCommand(flags);
        const serviceSid = check_service_sid_1.default(command, flags.serviceSid);
        return {
            cwd,
            accountSid,
            authToken,
            serviceSid,
            force: flags.force,
            createEnvironment: flags.createEnvironment,
            buildSid: flags.buildSid,
            targetEnvironment: flags.environment,
            sourceEnvironment: flags.sourceEnvironment,
        };
    });
}
exports.getConfigFromFlags = getConfigFromFlags;
