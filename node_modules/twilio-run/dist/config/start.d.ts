import { EnvironmentVariables } from '@twilio-labs/serverless-api';
import { Arguments } from 'yargs';
import { ExternalCliOptions, SharedFlags } from '../commands/shared';
import { CliInfo } from '../commands/types';
import { EnvironmentVariablesWithAuth } from '../types/generic';
declare type InspectInfo = {
    hostPort: string;
    break: boolean;
};
export declare type StartCliConfig = {
    inspect?: InspectInfo;
    baseDir: string;
    env: EnvironmentVariablesWithAuth;
    port: number;
    url: string;
    detailedLogs: boolean;
    live: boolean;
    logs: boolean;
    legacyMode: boolean;
    appName: string;
};
export declare type StartCliFlags = Arguments<SharedFlags & {
    dir?: string;
    cwd?: string;
    loadLocalEnv: boolean;
    env?: string;
    port: string;
    ngrok?: string | boolean;
    logs: boolean;
    detailedLogs: boolean;
    live: boolean;
    inspect?: string;
    inspectBrk?: string;
    legacyMode: boolean;
}>;
export declare type WrappedStartCliFlags = {
    flags: StartCliFlags;
};
export declare function getUrl(cli: StartCliFlags, port: string | number): Promise<string>;
export declare function getPort(cli: StartCliFlags): number;
export declare function getEnvironment(cli: StartCliFlags, baseDir: string): Promise<EnvironmentVariables>;
export declare function getBaseDirectory(cli: StartCliFlags): string;
export declare function getInspectInfo(cli: StartCliFlags): InspectInfo | undefined;
export declare function getConfigFromCli(flags: StartCliFlags, cliInfo?: CliInfo, externalCliOptions?: ExternalCliOptions): Promise<StartCliConfig>;
export {};
