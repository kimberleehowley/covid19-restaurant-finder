"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const conf_1 = __importDefault(require("conf"));
const DEFAULT_CONFIG_NAME = '.twilio-functions';
let config;
function getConfig(baseDir, configName = DEFAULT_CONFIG_NAME) {
    if (config) {
        return config;
    }
    config = new conf_1.default({
        cwd: baseDir,
        fileExtension: '',
        configName: configName,
        defaults: {
            projects: {},
        },
    });
    return config;
}
exports.getConfig = getConfig;
function readSpecializedConfig(baseDir, configFileName, commandConfigName, opts) {
    const config = getConfig(baseDir, configFileName);
    let result = {};
    if (config.has('serviceSid')) {
        result.serviceSid = config.get('serviceSid');
    }
    if (config.has(commandConfigName)) {
        const partial = config.get(commandConfigName);
        result = Object.assign(Object.assign({}, result), partial);
    }
    if (opts) {
        if (opts.projectId) {
            const projectConfigPath = `projects.${opts.projectId}`;
            if (config.has(projectConfigPath)) {
                const partial = config.get(projectConfigPath);
                delete partial.environments;
                delete partial.listConfig;
                delete partial.startConfig;
                delete partial.deployConfig;
                delete partial.activateConfig;
                result = Object.assign(Object.assign({}, result), partial);
            }
            const commandConfigPath = `projects.${opts.projectId}.${commandConfigName}`;
            if (config.has(commandConfigPath)) {
                const partial = config.get(commandConfigPath);
                result = Object.assign(Object.assign({}, result), partial);
            }
        }
        if (opts.environmentSuffix) {
            const environmentConfigPath = `environments.${opts.environmentSuffix}.${commandConfigName}`;
            if (config.has(environmentConfigPath)) {
                const partial = config.get(environmentConfigPath);
                result = Object.assign(Object.assign({}, result), partial);
            }
        }
        if (opts.projectId && opts.environmentSuffix) {
            const configPath = `projects.${opts.projectId}.environments.${opts.environmentSuffix}.${commandConfigName}`;
            if (config.has(configPath)) {
                const partial = config.get(configPath);
                result = Object.assign(Object.assign({}, result), partial);
            }
        }
    }
    return result;
}
exports.readSpecializedConfig = readSpecializedConfig;
