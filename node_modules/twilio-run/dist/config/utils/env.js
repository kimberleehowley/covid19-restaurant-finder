"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
const fs_1 = require("../../utils/fs");
function readLocalEnvFile(flags) {
    return __awaiter(this, void 0, void 0, function* () {
        if (flags.cwd) {
            const envPath = path_1.default.resolve(flags.cwd, flags.env || '.env');
            let contentEnvFile;
            if (yield fs_1.fileExists(envPath)) {
                contentEnvFile = yield fs_1.readFile(envPath, 'utf8');
            }
            else if (flags.env) {
                throw new Error(`Failed to find .env file at "${envPath}"`);
            }
            else {
                contentEnvFile = '';
            }
            const localEnv = dotenv_1.default.parse(contentEnvFile);
            return { localEnv, envPath };
        }
        return { envPath: '', localEnv: {} };
    });
}
exports.readLocalEnvFile = readLocalEnvFile;
