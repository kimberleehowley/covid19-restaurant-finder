"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../commands/utils");
const logger_1 = require("../../utils/logger");
const package_json_1 = require("./package-json");
const debug = logger_1.getDebugFunction('twilio-run:config:utils');
function getServiceNameFromFlags(flags) {
    return __awaiter(this, void 0, void 0, function* () {
        let { serviceName, cwd } = flags;
        if (typeof flags.projectName !== 'undefined') {
            utils_1.deprecateProjectName();
            if (!serviceName) {
                serviceName = flags.projectName;
            }
        }
        if (!serviceName && cwd) {
            try {
                const pkgJson = yield package_json_1.readPackageJsonContent(flags);
                if (typeof pkgJson.name === 'string') {
                    serviceName = pkgJson.name;
                }
            }
            catch (err) {
                debug('%O', err);
            }
        }
        return serviceName;
    });
}
exports.getServiceNameFromFlags = getServiceNameFromFlags;
