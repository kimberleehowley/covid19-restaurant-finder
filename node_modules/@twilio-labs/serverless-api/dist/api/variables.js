"use strict";
/** @module @twilio-labs/serverless-api/dist/api */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const pagination_1 = require("./utils/pagination");
const log = debug_1.default('twilio-serverless-api:variables');
/**
 * Creates a new environment variable for a given environment
 *
 * @param {string} key the name of the variable
 * @param {string} value the value of the variable
 * @param {string} environmentSid the environment the variable should be created for
 * @param {string} serviceSid the service that the environment belongs to
 * @param {GotClient} client API client
 * @returns {Promise<VariableResource>}
 */
function registerVariableInEnvironment(key, value, environmentSid, serviceSid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resp = yield client.post(`/Services/${serviceSid}/Environments/${environmentSid}/Variables`, {
                form: true,
                body: {
                    Key: key,
                    Value: value,
                },
            });
            return resp.body;
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
/**
 * Given the SID of a variable it will update the name and value of the variable
 *
 * @param {string} key the name of the variable
 * @param {string} value the value of the variable
 * @param {string} variableSid the SID of the existing variable
 * @param {string} environmentSid the environment the variable belongs to
 * @param {string} serviceSid the service the environment belongs to
 * @param {GotClient} client API client
 * @returns {Promise<VariableResource>}
 */
function updateVariableInEnvironment(key, value, variableSid, environmentSid, serviceSid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resp = yield client.post(`/Services/${serviceSid}/Environments/${environmentSid}/Variables/${variableSid}`, {
                form: true,
                body: {
                    Key: key,
                    Value: value,
                },
            });
            return resp.body;
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
/**
 * Lists all variables for a given environment
 *
 * @export
 * @param {string} environmentSid the environment to get the variables for
 * @param {string} serviceSid the service the environment belongs to
 * @param {GotClient} client API client
 * @returns {Promise<VariableResource[]>}
 */
function listVariablesForEnvironment(environmentSid, serviceSid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return pagination_1.getPaginatedResource(client, `/Services/${serviceSid}/Environments/${environmentSid}/Variables`);
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
exports.listVariablesForEnvironment = listVariablesForEnvironment;
/**
 * Convers an object of environment variables into an array of key-value pairs
 *
 * @param {EnvironmentVariables} env the object of environment variables
 * @returns {Variable[]}
 */
function convertToVariableArray(env) {
    const output = [];
    Object.keys(env).forEach(key => {
        const value = env[key];
        if (typeof value === 'string' || typeof value === 'number') {
            output.push({ key, value: `${value}` });
        }
    });
    return output;
}
/**
 * Sets or updates the values passed in an object of environment variables for a specfic environment
 *
 * @export
 * @param {EnvironmentVariables} envVariables the object of variables
 * @param {string} environmentSid the environment the varibales should be set for
 * @param {string} serviceSid the service the environment belongs to
 * @param {GotClient} client API client
 * @returns {Promise<void>}
 */
function setEnvironmentVariables(envVariables, environmentSid, serviceSid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        const existingVariables = yield listVariablesForEnvironment(environmentSid, serviceSid, client);
        const variables = convertToVariableArray(envVariables);
        const variableResources = variables.map(variable => {
            const existingResource = existingVariables.find(res => res.key === variable.key);
            if (!existingResource) {
                return registerVariableInEnvironment(variable.key, variable.value, environmentSid, serviceSid, client);
            }
            if (existingResource.value === variable.value) {
                return Promise.resolve(existingResource);
            }
            return updateVariableInEnvironment(variable.key, variable.value, existingResource.sid, environmentSid, serviceSid, client);
        });
        yield Promise.all(variableResources);
    });
}
exports.setEnvironmentVariables = setEnvironmentVariables;
