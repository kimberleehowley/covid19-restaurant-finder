"use strict";
/** @module @twilio-labs/serverless-api/dist/api */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const pagination_1 = require("./utils/pagination");
const log = debug_1.default('twilio-serverless-api:logs');
/**
 * Calls the API to retrieve a list of all assets
 *
 * @param {Sid} environmentSid environment in which to get logs
 * @param {Sid} serviceSid service to look for logs
 * @param {GotClient} client API client
 * @returns {Promise<LogApiResource[]>}
 */
function listLogResources(environmentSid, serviceSid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return pagination_1.getPaginatedResource(client, `/Services/${serviceSid}/Environments/${environmentSid}/Logs`);
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
exports.listLogResources = listLogResources;
/**
 * Calls the API to retrieve a list of all assets
 *
 * @param {Sid} environmentSid environment in which to get logs
 * @param {Sid} serviceSid service to look for logs
 * @param {GotClient} client API client
 * @returns {Promise<LogApiResource[]>}
 */
function listOnePageLogResources(environmentSid, serviceSid, client, filters) {
    return __awaiter(this, void 0, void 0, function* () {
        const pageSize = filters.pageSize || 50;
        const { functionSid, startDate, endDate, pageToken } = filters;
        try {
            let url = `/Services/${serviceSid}/Environments/${environmentSid}/Logs?PageSize=${pageSize}`;
            if (typeof functionSid !== 'undefined') {
                url += `&FunctionSid=${functionSid}`;
            }
            if (typeof startDate !== 'undefined') {
                url += `&StartDate=${startDate instanceof Date ? startDate.toISOString() : startDate}`;
            }
            if (typeof endDate !== 'undefined') {
                url += `&EndDate=${endDate instanceof Date ? endDate.toISOString() : endDate}`;
            }
            if (typeof pageToken !== 'undefined') {
                url += `&PageToken=${pageToken}`;
            }
            const resp = yield client.get(url);
            const content = resp.body;
            return content.logs;
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
exports.listOnePageLogResources = listOnePageLogResources;
/**
 * Calls the API to retrieve a list of all assets
 *
 * @param {Sid} logSid SID of log to retrieve
 * @param {Sid} environmentSid environment in which to get logs
 * @param {Sid} serviceSid service to look for logs
 * @param {GotClient} client API client
 * @returns {Promise<LogApiResource>}
 */
function getLog(logSid, environmentSid, serviceSid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resp = yield client.get(`/Services/${serviceSid}/Environments/${environmentSid}/Logs/${logSid}`);
            return resp.body;
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
exports.getLog = getLog;
