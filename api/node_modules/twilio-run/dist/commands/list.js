"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const serverless_api_1 = require("@twilio-labs/serverless-api");
const check_credentials_1 = require("../checks/check-credentials");
const check_service_sid_1 = __importDefault(require("../checks/check-service-sid"));
const list_1 = require("../config/list");
const list_2 = require("../printers/list");
const logger_1 = require("../utils/logger");
const shared_1 = require("./shared");
const utils_1 = require("./utils");
const debug = logger_1.getDebugFunction('twilio-run:list');
function logError(msg) {
    logger_1.logger.error(msg);
}
function handleError(err) {
    debug('%O', err);
    logError(err.message);
    process.exit(1);
}
function handler(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.setLogLevelByName(flags.logLevel);
        let config;
        try {
            config = yield list_1.getConfigFromFlags(flags, externalCliOptions);
        }
        catch (err) {
            debug(err);
            logError(err.message);
            process.exit(1);
            return;
        }
        if (!config) {
            logError('Internal Error');
            process.exit(1);
            return;
        }
        check_credentials_1.checkConfigForCredentials(config);
        if (config.types !== 'services' && config.types[0] !== 'services') {
            const command = utils_1.getFullCommand(flags);
            check_service_sid_1.default(command, config.serviceSid);
        }
        try {
            const client = new serverless_api_1.TwilioServerlessApiClient(config);
            const result = yield client.list(Object.assign({}, config));
            list_2.printListResult(result, config);
        }
        catch (err) {
            handleError(err);
        }
    });
}
exports.handler = handler;
exports.cliInfo = {
    argsDefaults: {
        types: 'services',
    },
    options: Object.assign(Object.assign({}, shared_1.sharedCliOptions), { 'service-name': {
            type: 'string',
            alias: 'n',
            describe: 'Overrides the name of the Serverless project. Default: the name field in your package.json',
        }, 'project-name': {
            type: 'string',
            hidden: true,
            describe: 'DEPRECATED: Overrides the name of the project. Default: the name field in your package.json',
        }, properties: {
            type: 'string',
            describe: 'Specify the output properties you want to see. Works best on single types',
            hidden: true,
        }, 'extended-output': {
            type: 'boolean',
            describe: 'Show an extended set of properties on the output',
            default: false,
        }, cwd: {
            type: 'string',
            hidden: true,
            describe: 'Sets the directory of your existing Serverless project. Defaults to current directory',
        }, environment: {
            type: 'string',
            describe: 'The environment to list variables for',
            default: 'dev',
        }, 'account-sid': {
            type: 'string',
            alias: 'u',
            describe: 'A specific account SID to be used for deployment. Uses fields in .env otherwise',
        }, 'auth-token': {
            type: 'string',
            describe: 'Use a specific auth token for deployment. Uses fields from .env otherwise',
        }, 'service-sid': {
            type: 'string',
            describe: 'Specific Serverless Service SID to run list for',
        }, env: {
            type: 'string',
            describe: 'Path to .env file for environment variables that should be installed',
        } }),
};
function optionBuilder(yargs) {
    if (exports.cliInfo.argsDefaults) {
        yargs = Object.keys(exports.cliInfo.argsDefaults).reduce((yargs, name) => {
            if (exports.cliInfo.argsDefaults && exports.cliInfo.argsDefaults[name]) {
                return yargs.default(name, exports.cliInfo.argsDefaults[name]);
            }
            return yargs;
        }, yargs);
    }
    yargs = yargs
        .example('$0 list services', 'Lists all existing services/projects associated with your Twilio Account')
        .example('$0 ls functions,assets --environment=dev --service-name=demo', 'Lists all existing functions & assets associated with the `dev` environment of this service/project')
        .example('$0 ls environments --service-sid=ZSxxxxx --extended-output', 'Outputs all environments for a specific service with extended output for better parsing')
        .example('$0 ls assets,variables,functions --properties=sid,date_updated', 'Only lists the SIDs and date of last update for assets, variables and function');
    yargs = Object.keys(exports.cliInfo.options).reduce((yargs, name) => {
        return yargs.option(name, exports.cliInfo.options[name]);
    }, yargs);
    return yargs;
}
exports.command = ['list [types]', 'ls [types]'];
exports.describe = 'List existing services, environments, variables, deployments for your Twilio Serverless Account';
exports.builder = optionBuilder;
