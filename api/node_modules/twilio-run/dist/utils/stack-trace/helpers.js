"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
exports.MODULE_ROOT = path_1.default.resolve(__dirname, '../../');
/**
 * Turns a set of stack frames into a stack trace string equivalent to the one
 * generated by V8
 *
 * https://v8.dev/docs/stack-trace-api
 *
 * @param err The error instance for this stack trace
 * @param stack Callsite instances for each frame from V8
 */
function stringifyStackTrace(err, stack) {
    const callSiteStrings = stack
        .map(callSite => {
        return `    at ${callSite}`;
    })
        .join('\n');
    const stackTrace = `${err.name}: ${err.message}\n${callSiteStrings}`;
    return stackTrace;
}
exports.stringifyStackTrace = stringifyStackTrace;
/**
 * Returns all stack frames until one is reached that comes from inside twilio-run
 *
 * https://v8.dev/docs/stack-trace-api
 *
 * @param stack Array of callsite instances from the V8 Stack Trace API
 */
function filterCallSites(stack) {
    let indexOfFirstInternalCallSite = stack.findIndex(callSite => { var _a; return (_a = callSite.getFileName()) === null || _a === void 0 ? void 0 : _a.includes(exports.MODULE_ROOT); });
    indexOfFirstInternalCallSite =
        indexOfFirstInternalCallSite === -1
            ? stack.length
            : indexOfFirstInternalCallSite;
    return stack.slice(0, indexOfFirstInternalCallSite);
}
exports.filterCallSites = filterCallSites;
/**
 * Removes any stack traces that are internal to twilio-run and replaces it
 * with one [Twilio Dev Server internals] statement.
 *
 * To be used with Error.prepareStackTrace from the V8 Stack Trace API
 * https://v8.dev/docs/stack-trace-api
 *
 * @param err The error instance for this stack trace
 * @param stack Callsite instances for each from from V8 Stack Trace API
 */
function formatStackTraceWithInternals(err, stack) {
    const filteredStack = filterCallSites(stack);
    const stackTraceWithoutInternals = stringifyStackTrace(err, filteredStack);
    if (filteredStack.length === stack.length) {
        return stackTraceWithoutInternals;
    }
    return `${stackTraceWithoutInternals}\n    at [Twilio Dev Server internals]`;
}
exports.formatStackTraceWithInternals = formatStackTraceWithInternals;
