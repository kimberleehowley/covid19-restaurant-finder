"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const body_parser_1 = __importDefault(require("body-parser"));
const express_1 = __importDefault(require("express"));
const express_useragent_1 = __importDefault(require("express-useragent"));
const nocache_1 = __importDefault(require("nocache"));
const start_1 = require("../printers/start");
const chokidar_1 = __importDefault(require("chokidar"));
const lodash_debounce_1 = __importDefault(require("lodash.debounce"));
const path_1 = __importDefault(require("path"));
const error_html_1 = require("../utils/error-html");
const logger_1 = require("../utils/logger");
const request_logger_1 = require("./internal/request-logger");
const route_cache_1 = require("./internal/route-cache");
const runtime_paths_1 = require("./internal/runtime-paths");
const route_1 = require("./route");
const debug = logger_1.getDebugFunction('twilio-run:server');
const DEFAULT_PORT = process.env.PORT || 3000;
const RELOAD_DEBOUNCE_MS = 250;
const DEFAULT_BODY_SIZE_LAMBDA = '6mb';
function requireUncached(module) {
    delete require.cache[require.resolve(module)];
    return require(module);
}
function loadTwilioFunction(fnPath, config) {
    if (config.live) {
        debug('Uncached loading of %s', fnPath);
        return requireUncached(fnPath).handler;
    }
    else {
        return require(fnPath).handler;
    }
}
function createServer(port = DEFAULT_PORT, config) {
    return __awaiter(this, void 0, void 0, function* () {
        config = Object.assign({ url: `http://localhost:${port}`, baseDir: process.cwd() }, config);
        debug('Starting server with config: %p', config);
        const app = express_1.default();
        app.use(express_useragent_1.default.express());
        app.use(body_parser_1.default.urlencoded({ extended: false, limit: DEFAULT_BODY_SIZE_LAMBDA }));
        app.use(body_parser_1.default.json({ limit: DEFAULT_BODY_SIZE_LAMBDA }));
        app.get('/favicon.ico', (req, res) => {
            res.redirect('https://www.twilio.com/marketing/bundles/marketing/img/favicons/favicon.ico');
        });
        if (config.logs) {
            app.use(request_logger_1.createLogger(config));
        }
        if (config.live) {
            app.use(nocache_1.default());
        }
        if (config.legacyMode) {
            process.env.TWILIO_FUNCTIONS_LEGACY_MODE = config.legacyMode
                ? 'true'
                : undefined;
            debug('Legacy mode enabled');
            app.use('/assets/*', (req, res, next) => {
                req.path = req.path.replace('/assets/', '/');
                next();
            });
        }
        let routes = yield runtime_paths_1.getFunctionsAndAssets(config.baseDir);
        let routeMap = route_cache_1.setRoutes(routes);
        if (config.live) {
            const watcher = chokidar_1.default.watch([
                path_1.default.join(config.baseDir, '/(functions|src)/**/*.js'),
                path_1.default.join(config.baseDir, '/(assets|static)/**/*'),
            ], {
                ignoreInitial: true
            });
            const reloadRoutes = () => __awaiter(this, void 0, void 0, function* () {
                routes = yield runtime_paths_1.getFunctionsAndAssets(config.baseDir);
                routeMap = route_cache_1.setRoutes(routes);
                yield start_1.printRouteInfo(config);
            });
            // Debounce so we don't needlessly reload when multiple files are changed
            const debouncedReloadRoutes = lodash_debounce_1.default(reloadRoutes, RELOAD_DEBOUNCE_MS);
            watcher
                .on('add', path => {
                debug(`Reloading Routes: add @ ${path}`);
                debouncedReloadRoutes();
            })
                .on('unlink', path => {
                debug(`Reloading Routes: unlink @ ${path}`);
                debouncedReloadRoutes();
            });
            // Clean the watcher up when exiting.
            process.on('exit', () => watcher.close());
        }
        route_1.constructGlobalScope(config);
        app.set('port', port);
        app.all('/*', (req, res, next) => {
            if (!routeMap.has(req.path)) {
                res.status(404).send('Could not find request resource');
                return;
            }
            const routeInfo = routeMap.get(req.path);
            if (routeInfo && routeInfo.type === 'function') {
                const functionPath = routeInfo.filePath;
                try {
                    if (!functionPath) {
                        throw new Error('Missing function path');
                    }
                    debug('Load & route to function at "%s"', functionPath);
                    const twilioFunction = loadTwilioFunction(functionPath, config);
                    if (typeof twilioFunction !== 'function') {
                        return res
                            .status(404)
                            .send(`Could not find a "handler" function in file ${functionPath}`);
                    }
                    route_1.functionToRoute(twilioFunction, config, functionPath)(req, res, next);
                }
                catch (err) {
                    debug('Failed to retrieve function. %O', err);
                    if (err.code === 'ENOENT') {
                        res.status(404).send(`Could not find function ${functionPath}`);
                    }
                    else {
                        res.status(500).send(error_html_1.wrapErrorInHtml(err, functionPath));
                    }
                }
            }
            else if (routeInfo && routeInfo.type === 'asset') {
                if (routeInfo.filePath) {
                    if (routeInfo.access === 'private') {
                        res.status(403).send('This asset has been marked as private');
                    }
                    else {
                        res.sendFile(routeInfo.filePath);
                    }
                }
                else {
                    res.status(404).send('Could not find asset');
                }
            }
            else {
                res.status(404).send('Could not find requested resource');
            }
        });
        return app;
    });
}
exports.createServer = createServer;
function runServer(port = DEFAULT_PORT, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const app = yield createServer(port, config);
        return new Promise(resolve => {
            app.listen(port);
            resolve(app);
        });
    });
}
exports.runServer = runServer;
