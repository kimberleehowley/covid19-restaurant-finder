"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../utils/logger");
const env_1 = require("./env");
const debug = logger_1.getDebugFunction('twilio-run:config:credentials');
/**
 * Determines the credentials by the following order of preference:
 * 1. value via explicit flags
 * 2. value passed in through externalCliOptions if `profile` exists
 * 3. value passed in through externalCliOptions if `project` (deprecated and removed in `@twilio/cli-core` v3) exists
 * 4. value in .env file
 * 5. value passed in through externalCliOptions
 * 6. empty string
 * @param flags Flags passed into command
 * @param externalCliOptions Any external information for example passed by the Twilio CLI
 */
function getCredentialsFromFlags(flags, externalCliOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        // default Twilio CLI credentials (4) or empty string (5)
        let accountSid = (externalCliOptions &&
            !(externalCliOptions.profile || externalCliOptions.project) &&
            externalCliOptions.username) ||
            '';
        let authToken = (externalCliOptions &&
            !(externalCliOptions.profile || externalCliOptions.project) &&
            externalCliOptions.password) ||
            '';
        if (flags.cwd) {
            // env file content (3)
            const { localEnv } = yield env_1.readLocalEnvFile(flags);
            if (localEnv.ACCOUNT_SID) {
                debug('Override value with .env ACCOUNT_SID value');
                accountSid = localEnv.ACCOUNT_SID;
            }
            if (localEnv.AUTH_TOKEN) {
                debug('Override value with .env AUTH_TOKEN value');
                authToken = localEnv.AUTH_TOKEN;
            }
        }
        // specific profile specified. override both credentials (2)
        if (externalCliOptions &&
            (externalCliOptions.profile || externalCliOptions.project)) {
            debug('Values read from explicit CLI profile');
            accountSid = externalCliOptions.username;
            authToken = externalCliOptions.password;
        }
        // specific flag passed. override for that flag (1)
        if (flags.accountSid) {
            debug('Override accountSid with value from flag');
            accountSid = flags.accountSid;
        }
        if (flags.authToken) {
            debug('Override authToken with value from flag');
            authToken = flags.authToken;
        }
        return {
            accountSid,
            authToken,
        };
    });
}
exports.getCredentialsFromFlags = getCredentialsFromFlags;
