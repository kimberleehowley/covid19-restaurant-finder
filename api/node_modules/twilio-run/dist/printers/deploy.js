"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const columnify_1 = __importDefault(require("columnify"));
const common_tags_1 = require("common-tags");
const terminal_link_1 = __importDefault(require("terminal-link"));
const logger_1 = require("../utils/logger");
const output_1 = require("../utils/output");
const utils_1 = require("./utils");
function sortByAccess(resA, resB) {
    if (resA.access === resB.access && resA.path && resB.path) {
        return resA.path.localeCompare(resB.path);
    }
    return resA.access.localeCompare(resB.access);
}
function plainPrintDeployedResources(config, result) {
    const functionsOutput = columnify_1.default(result.functionResources.sort(sortByAccess).map(fn => (Object.assign(Object.assign({}, fn), { url: `https://${result.domain}${fn.path}` }))), {
        columns: ['access', 'path', 'url'],
        showHeaders: false,
    });
    const assetsOutput = columnify_1.default(result.assetResources.sort(sortByAccess).map(asset => (Object.assign(Object.assign({}, asset), { url: `https://${result.domain}${asset.path}` }))), {
        columns: ['access', 'path', 'url'],
        showHeaders: false,
    });
    const data = {
        domain: result.domain,
        serviceName: config.serviceName,
        serviceSid: result.serviceSid,
        environmentSuffix: config.functionsEnv,
        environmentSid: result.environmentSid,
        buildSid: result.buildSid,
        viewLiveLogs: utils_1.getTwilioConsoleDeploymentUrl(result.serviceSid, result.environmentSid),
    };
    const output = `
deploymentInfo\n${utils_1.printObjectWithoutHeaders(data)}

functions\n${functionsOutput}

assets\n${assetsOutput}
  `;
    output_1.writeOutput(common_tags_1.stripIndent(output));
}
function prettyPrintConfigInfo(config) {
    let dependencyString = '';
    if (config.pkgJson && config.pkgJson.dependencies) {
        dependencyString = Object.keys(config.pkgJson.dependencies).join(', ');
    }
    logger_1.logger.info('\nDeploying functions & assets to the Twilio Runtime');
    output_1.writeOutput(chalk_1.default `
{bold.cyan Account}\t\t${config.accountSid}
{bold.cyan Token}\t\t${utils_1.redactPartOfString(config.authToken)}
{bold.cyan Service Name}\t${config.serviceName}
{bold.cyan Environment}\t${config.functionsEnv}
{bold.cyan Root Directory}\t${config.cwd}
{bold.cyan Dependencies}\t${dependencyString}
{bold.cyan Env Variables}\t${Object.keys(config.env).join(', ')}
`);
}
function plainPrintConfigInfo(config) {
    let dependencyString = '';
    if (config.pkgJson && config.pkgJson.dependencies) {
        dependencyString = Object.keys(config.pkgJson.dependencies).join(',');
    }
    const printObj = {
        account: config.accountSid,
        serviceName: config.serviceName,
        environment: config.functionsEnv,
        rootDirectory: config.cwd,
        dependencies: dependencyString,
        environmentVariables: Object.keys(config.env).join(','),
    };
    output_1.writeOutput(`configInfo\n${utils_1.printObjectWithoutHeaders(printObj)}\n`);
}
function prettyPrintDeployedResources(config, result) {
    const twilioConsoleLogsLink = terminal_link_1.default('Open the Twilio Console', utils_1.getTwilioConsoleDeploymentUrl(result.serviceSid, result.environmentSid), {
        fallback: (text, url) => chalk_1.default.dim(url),
    });
    output_1.writeOutput(chalk_1.default `
{bold.cyan.underline Deployment Details}
{bold.cyan Domain:} ${result.domain}
{bold.cyan Service:}
   ${config.serviceName} {dim (${result.serviceSid})}
{bold.cyan Environment:}
   ${config.functionsEnv} {dim (${result.environmentSid})} 
{bold.cyan Build SID:}
   ${result.buildSid}
{bold.cyan View Live Logs:}
   ${twilioConsoleLogsLink}
  `.trim());
    if (result.functionResources) {
        const functionMessage = result.functionResources
            .sort(sortByAccess)
            .map(fn => {
            const accessPrefix = fn.access !== 'public' ? chalk_1.default `{bold [${fn.access}]} ` : '';
            return chalk_1.default `   ${accessPrefix}{dim https://${result.domain}}${fn.path}`;
        })
            .join('\n');
        output_1.writeOutput(chalk_1.default.bold.cyan('Functions:'));
        output_1.writeOutput(functionMessage);
    }
    if (result.assetResources) {
        const assetMessage = result.assetResources
            .sort(sortByAccess)
            .map(asset => {
            const accessPrefix = asset.access !== 'public' ? chalk_1.default `{bold [${asset.access}]} ` : '';
            const accessUrl = asset.access === 'private'
                ? chalk_1.default `{dim Runtime.getAssets()['}${asset.path}{dim ']}`
                : chalk_1.default `{dim https://${result.domain}}${asset.path}`;
            return `   ${accessPrefix}${accessUrl}`;
        })
            .join('\n');
        output_1.writeOutput(chalk_1.default.bold.cyan('Assets:'));
        output_1.writeOutput(assetMessage);
    }
}
function printConfigInfo(config) {
    if (utils_1.shouldPrettyPrint) {
        prettyPrintConfigInfo(config);
    }
    else {
        plainPrintConfigInfo(config);
    }
}
exports.printConfigInfo = printConfigInfo;
function printDeployedResources(config, result) {
    if (utils_1.shouldPrettyPrint) {
        prettyPrintDeployedResources(config, result);
    }
    else {
        plainPrintDeployedResources(config, result);
    }
}
exports.printDeployedResources = printDeployedResources;
