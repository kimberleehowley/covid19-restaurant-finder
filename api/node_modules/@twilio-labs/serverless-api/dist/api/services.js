"use strict";
/** @module @twilio-labs/serverless-api/dist/api */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const pagination_1 = require("./utils/pagination");
const log = debug_1.default('twilio-serverless-api:services');
/**
 * Creates a new service given a service name
 *
 * @export
 * @param {string} serviceName the unique name for the service
 * @param {GotClient} client API client
 * @returns {Promise<string>}
 */
function createService(serviceName, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resp = yield client.post('/Services', {
                form: true,
                body: {
                    UniqueName: serviceName,
                    FriendlyName: serviceName,
                    IncludeCrendentials: true,
                },
            });
            const service = resp.body;
            return service.sid;
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
exports.createService = createService;
/**
 * Lists all services attached to an account
 *
 * @export
 * @param {GotClient} client API client
 * @returns {Promise<ServiceResource[]>}
 */
function listServices(client) {
    return __awaiter(this, void 0, void 0, function* () {
        return pagination_1.getPaginatedResource(client, '/Services');
    });
}
exports.listServices = listServices;
/**
 * Tries to find the service SID associated to a service name
 *
 * @export
 * @param {string} uniqueName the unique name of the service
 * @param {GotClient} client API client
 * @returns {(Promise<string | undefined>)}
 */
function findServiceSid(uniqueName, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const services = yield listServices(client);
            for (let service of services) {
                if (service.unique_name === uniqueName) {
                    return service.sid;
                }
            }
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
        return undefined;
    });
}
exports.findServiceSid = findServiceSid;
function getService(sid, client) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const resp = yield client.get(`/Services/${sid}`);
            return resp.body;
        }
        catch (err) {
            log('%O', err);
            throw err;
        }
    });
}
exports.getService = getService;
