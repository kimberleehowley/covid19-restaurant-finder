"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const logs_1 = require("../api/logs");
class LogsStream extends stream_1.Readable {
    constructor(environmentSid, serviceSid, client, config) {
        super({ objectMode: true });
        this.environmentSid = environmentSid;
        this.serviceSid = serviceSid;
        this.client = client;
        this.config = config;
        this._interval = undefined;
        this._viewedSids = new Set();
        this._pollingFrequency = config.pollingFrequency || 1000;
    }
    set pollingFrequency(frequency) {
        this._pollingFrequency = frequency;
        if (this.config.tail && this._interval) {
            clearInterval(this._interval);
            this._interval = setInterval(() => {
                this._poll();
            }, this._pollingFrequency);
        }
    }
    _poll() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const logs = yield logs_1.listOnePageLogResources(this.environmentSid, this.serviceSid, this.client, {
                    functionSid: this.config.filterByFunction,
                    pageSize: this.config.limit,
                });
                logs
                    .filter(log => !this._viewedSids.has(log.sid))
                    .reverse()
                    .forEach(log => {
                    this.push(log);
                });
                // Replace the set each time rather than adding to the set.
                // This way the set is always the size of a page of logs and the next page
                // will either overlap or not. This is instead of keeping an ever growing
                // set of viewSids which would cause memory issues for long running log
                // tails.
                this._viewedSids = new Set(logs.map(log => log.sid));
                if (!this.config.tail) {
                    this.push(null);
                }
            }
            catch (err) {
                this.destroy(err);
            }
        });
    }
    _read() {
        if (this.config.tail && !this._interval) {
            this._interval = setInterval(() => {
                this._poll();
            }, this._pollingFrequency);
        }
        else {
            this._poll();
        }
    }
    _destroy() {
        if (this._interval) {
            clearInterval(this._interval);
            this._interval = undefined;
        }
    }
}
exports.LogsStream = LogsStream;
